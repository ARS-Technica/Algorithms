"""
https://www.geeksforgeeks.org/window-sliding-technique/

Prerequisite to use Sliding window technique

The use of Sliding Window technique can be done in a very specific scenario, 
where the size of window for computation is fixed throughout the complete nested
loop. Only then the time complexity can be reduced. 

How to use Sliding Window Technique?

The general use of Sliding window technique can be demonstrated as following:

Find the size of window required 

Compute the result for 1st window, i.e. from start of data structure
Then use a loop to slide the window by 1, and keep computing the result window by window.
"""


# Static Sliding Window

def Count(string, sub):
    index = []
    
    for i in range(len(string)):
        if string [i:i+len(sub)] == sub:
            index.append(i) 
            
    print(f"{string} has {len(index)} occurances of {sub} at indexes {index}.")
    
 
if __name__ == "__main__":
    print(Count("dadaddadaadada", "dad")) 


#%%

"""
Given an array of N elements, what is the smallest subarray size such that the
sum of the elements is greater than or equal to some constant S
"""


# Dynamic Sliding Window
# https://www.youtube.com/watch?v=nCcSwjFmfMM

# Naive Solution O(N^2)

def Count(arr, n, s):
    res = float("inf")

    for i in range(len(arr)):
        sum = 0
        for j in range(i, len(arr)):
            sum += arr[j]
            if sum >= s:               
                res = min(res, j - i + 1)

    return res 


if __name__ == "__main__":
    print(Count([5, 1, 3, 5, 10, 7, 4, 9, 2, 8], n = 10, s = 15))       # 2 (5, 10)
    print(Count([1, 2, 3, 4, 5], n = 5, s = 11))                        # 3 (3, 4, 5)
 

#%%

"""
We can use sliding window to improve the time complexity from O(N^2) to O(N) 

We maintain 2 pointers L and R

Increment right pointer R until the sum of our window is >= S

For the minimum, increment the left point L while the sum is still >= S
"""


def Count(arr, n, s):
    res = float("inf")
    l = 0
    sum = 0    

    for r in range(n):
        sum += arr[r]        
        while sum >= s:            
            res = min(res, r - l + 1)
            sum -= arr[l]
            l += 1
            
        r += 1

    return res
    # return 0 if result == float("inf") else result


if __name__ == "__main__":
    print(Count([5, 1, 3, 5, 10, 7, 4, 9, 2, 8], n = 10, s = 15))       # 2 (5, 10)
    print(Count([1, 2, 3, 4, 5], n = 5, s = 11))                        # 3 (3, 4, 5)
 

#%%
