 
# Maximum sum subarray of Size K

"""
Maximum sum subarray of Size k
Given an array of positive integers, and a positive number k, find the maximum
sum of any contiguous subarray of size k.
"""

def getMaxSum(arr, k):
    maxSum = 0
    windowSum = 0
    start = 0
    
    for i in range(len(arr)):
        windowSum += arr[i]
        
        if ((i - start + 1) == k):
            maxSum = max(maxSum, windowSum)
            windowSum -= arr[start]
            start += 1
    
    return maxSum


if __name__ == "__main__":
    print(getMaxSum([3, 5, 2, 1, 7], k=2))      # 8
 
    

#%%
 
# Count Occurrences of AnagramMaximum sum subarray of Size K

"""
Count Occurrences of Anagram
Given a word and a text, return the count of occurrences of the anagrams of the
word in the text.
"""
 

def countAnagram(text, word):
    w = len(word) 
    count = 0
    ana = ''
    d = {}
    for i in range(w):
        ana += text[i]
    if isAnagram(ana, word):
        count += 1
    
    for i in range(1, len(text)):
        ana = ana[1:] + text[i]
        
        if ana not in d and isAnagram(ana, word):
            count += 1
            d[ana] = 0
        d[ana] = 0
    
    return count
 

def isAnagram(s, word):
    if len(s) != len(word):
        return False
    
    d = [0] * 26
    for c in s:
        d[ord(c) - ord('a')] = 1
    
    for c in word:
        if d[ord(c) - ord('a')] == 0:
            return False
    
    return True


if __name__ == "__main__":
    print(countAnagram(text = "gotxxotgxdogt", word = "got"))      # 3


#%%
 
# Find the longest substring of a string containing ‘k’ distinct characters


def getLongest(s, k):
    high = 0
    windows = set()
    freq = [0] * 128
    low = 0
    end = 0
    start = 0
    
    while high < len(s):
        windows.add(s[high])
        freq[ord(s[high])] += 1
        
        while len(windows) > k:
            freq[ord(s[low])] -= 1
            if freq[ord(s[low])] == 0:
                windows.remove(s[low])
            
            low += 1
            
        if end - start < high - low:
            end = high
            start = low
        
        high += 1
        
    return s[start:end + 1]

    
if __name__ == "__main__":
    print(getLongest(s = 'abcbdbdbbdcdabd', k = 2))      # bdbdbbd
    

#%%

# Find minimum Sum SubArray of size k


def getMinSum(arr, k):
    currSum = 0
    minSum = float("inf")
    start = 0
    
    for i in range(len(arr)):
        currSum += arr[i]
        
        if (i - start + 1 == k):
            minSum = min(minSum, currSum)
            currSum -= arr[start]
            start += 1
    
    return minSum


if __name__ == "__main__":
    print(getLongest(arr = [10, 4, 2, 5, 6, 3, 8, 1], k = 3))      # 11



#%%

# Length of the longest substring that doesn’t contain any vowels 


def getLongestSubstring(s):
    vowels = ['a', 'e', 'i', 'o', 'u']
    result = ""
    maxResult = ""
    for i in range(len(s)):
        if s[i] not in vowels:
            result += s[i]
            print(result)
            if len(result) > len(maxResult):
                maxResult = result
        else:
            result = ""
    
    return len(maxResult)
 

if __name__ == "__main__":
    print(getLongest(s = "codeforintelligents"))      # 3


#%%

# Count negative elements present in every k-length subarray


def getCountNegatives(arr, k):
    lst = []
    start = 0
    count = 0
    
    for i in range(len(arr)):
        if arr[i] < 0:
            count += 1
        
        if (i - start + 1 == k):
            lst.append(count)
            if arr[start] < 0:
                count -= 1
                
            start += 1
    
    return lst


if __name__ == "__main__":
    print(getLongest(arr = [-1, 2, -2, 3, 5, -7, -5], K = 3))      # 2, 1, 1, 1, 2


#%%

# Minimum Size Subarray Sum


def minSubArrayLen(target, nums):
    currSum = 0
    start = 0
    count = 0
    minCount = float("inf")
    
    for i in range(len(nums)):
        currSum += nums[i]
        
        while currSum >= target:
            minCount = min(minCount, i - start + 1)
            currSum -= nums[start]
            start += 1
        
        if minCount == float("inf"):
            return 0
        
    return minCount


if __name__ == "__main__":
    print(minSubArrayLen(target = 7, nums = [2,3,1,2,4,3]))      #2

# Explanation: The subarray [4,3] has the minimal length under the problem constraint


#%%

# Find All Anagrams in a String


def findAnagrams(s, p):
    target = [0] *  26
    result = []
    count = [0] * 26
    start = 0
    
    for c in p:
        target[ord(c) - ord('a')] += 1
   
    for i in range(len(s)):
        count[ord(s[i]) - ord('a')] += 1
        if i - start == len(p):
            count[ord(s[start]) - ord('a')] -= 1
            start += 1
        
        if count == target:
            result.append(start)
    
    return result


if __name__ == "__main__":
    print(findAnagrams(s = "cbaebabacd", p = "abc"))      # [0,6]


# The substring with start index = 0 is "cba", which is an anagram of "abc".
# The substring with start index = 6 is "bac", which is an anagram of "abc".


#%%

# Maximum Average Subarray


def findMaxAverage(nums, k):
    st = 0
    max_sum = float('-inf')
    win_sum = 0.0
    
    for i in range(len(nums)):
        win_sum += nums[i]
        if i >= k-1:
            max_sum = max(win_sum, max_sum)
            win_sum -= nums[st]
            st += 1

    return max_sum/k


if __name__ == "__main__":
    print(findMaxAverage(nums = [1,12,-5,-6,50,3], k = 4))      # 12.75000

# Explanation: Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75


#%%
