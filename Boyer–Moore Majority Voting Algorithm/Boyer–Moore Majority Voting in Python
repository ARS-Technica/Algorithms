"""
1. Brute-Force Solution with Loops

A naive solution is to count each element’s frequency in the first half of the array to check if it is the majority element.
"""

# Runtime: O(n2) | Space: O(1)


def majority_ele(nums):
    size = len(nums)
    max_count = 0
    
    for i in range(size):
        count = 0
        for j in range(size):
            if nums[i] == nums[j]:
                count = count + 1
        if count > max_count:
            max_count = count
            element = i
            
    if max_count > size // 2:
        return nums[element]

"""
Since the list had to be travelled repeatedly for every element, hence a nested for loop was required in this method. Thus, this leads to quadratic runtime complexity of O(n2).  We can improve worst-case time complexity to O(n.log(n)) by sorting the array and then perform a binary search for each element’s first and last occurrence. If the difference between first and last occurrence is more than n/2, the The majority element is found.
"""


"""
2. Linear-time Solution with Dictionary

We can use hashing to solve this problem in linear time. The idea is to store each element’s frequency in a map and return it if its frequency becomes more than n/2. If no such element is present, then the The majority element doesn’t exist in the array, and return -1.
"""

# O(n) Runtime | O(n) Extra Space


# Function to find the majority element present in a given list
def findMajorityElement(nums):
 
    # create an empty `HashMap`
    d = {}
 
    # store each element's frequency in a dictionary
    for i in nums:
        d[i] = d.get(i, 0) + 1
 
    # return the element if its count is more than `n/2`
    for key, value in d.items():
        if value > len(nums) / 2:
            return key
 
    # no majority element is present
    return -1
 
 
if __name__ == '__main__':
 
    # assumption: valid input (majority element is present)
    nums = [1, 8, 7, 4, 1, 2, 2, 2, 2, 2, 2]
 
    result = findMajorityElement(nums)
    if result != -1:
        print('The majority element is', result)
    else:
        print('The majority element doesn\'t exist')


"""
3. Boyer–Moore majority vote algorithm

The algorithm processes each element of the sequence, one at a time. When processing an element x,

If the counter is 0, set the current candidate to x, and set the counter to 1.

If the counter is non-zero, increment or decrement it according to whether x is a current candidate.

At the end of this process, if the sequence has a majority, it will be the element stored by the algorithm. If there is no majority element, the algorithm will not detect that fact and may output the wrong element. In other words, the Boyer–Moore majority vote algorithm produces correct results only when the majority element is present in the input.
"""

# Runtime: O(N) | Space: O(1)

# Function to find the majority element present in a given list
def findMajorityElement(nums):
 
    # `m` stores the majority element (if present)
    m = -1
 
    # initialize counter `i` with 0
    i = 0
 
    # do for each element `nums[j]` in the list
    for j in range(len(nums)):
 
        # if counter `i` becomes 0
        if i == 0:
 
            # set the current candidate to `nums[j]`
            m = nums[j]
 
            # reset the counter to 1
            i = 1
 
        # otherwise, increment the counter if `nums[j]` is a current candidate
        elif m == nums[j]:
            i = i + 1
 
        # otherwise, decrement the counter if `nums[j]` is a current candidate
        else:
            i = i - 1
 
    return m
 
 
if __name__ == '__main__':
 
    # assumption: valid input (majority element is present)
    nums = [1, 8, 7, 4, 1, 2, 2, 2, 2, 2, 2]
 
    print('The majority element is', findMajorityElement(nums))

