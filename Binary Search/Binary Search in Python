'''
Write a function that takes in a sorted array of integers as well as a 
target integer. The function should use the Binary Search algorithm to 
find if the target number is contained in the array and should return 
its index if it is, otherwise -1.
'''

# O(log(n)) time | O(1) space


def binary_search(array, target):
    left = 0
    right = len(array) - 1
    
    while left <= right:
        middle = (left + right) // 2
        
        if target < array[middle]:
            right = middle - 1
        elif target > array[middle]:
            left = middle + 1
        else:    # target == array[middle]
            return middle

    #print('Value not present in array')        
    return -1 

if __name__ == "__main__":
    print(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9,], 3))                       #2
    print(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9,], 8))                       #7   
    print(binary_search([1, 5, 23, 111], 111))                                  #3
    print(binary_search([1, 5, 23, 111], 5))                                    #1 
    print(binary_search([1, 5, 23, 111], 35))                                   #-1 
    print(binary_search([0, 1, 21, 33, 45, 45, 61, 71, 72, 73], 33))            #3
    print(binary_search([0, 1, 21, 33, 45, 45, 61, 71, 72, 73], 72))            #8
    print(binary_search([0, 1, 21, 33, 45, 45, 61, 71, 72, 73], 73))            #9
    print(binary_search([0, 1, 21, 33, 45, 45, 61, 71, 72, 73], 70))            #-1
    print(binary_search([0, 1, 21, 33, 45, 45, 61, 71, 72, 73, 355], 355))      #10
    print(binary_search([0, 1, 21, 33, 45, 45, 61, 71, 72, 73, 355], 354))      #-1
    
    
#%%
